---
interpret_policy_task:
  description: Interpret the provided {policy_document} to extract and structure sensitive
    data detection rules. Output the structured rules as {structured_policy_rules}
    in a machine-readable format.
  expected_output: A structured representation (e.g., JSON schema) of the policy rules
    that define keywords, patterns, exceptions, and thresholds for detecting sensitive
    data.
  async_execution: false
  agent: PolicyInterpreter

display_policy_task:
  description: Render the structured policy rules ({structured_policy_rules}) on a
    web interface for user review, validation, and approval.
  expected_output: An html file that provides a user-friendly web interface that displays the structured policy
    rules clearly, facilitating stakeholder review and approval. 
    The html should display both the original policy text from the {policy_document} and the structured policy rules from the {structured_policy_rules}.
    The html should be saved in the current working directory as policy-html.
  async_execution: false
  agent: PolicyDisplay
  context:
  - interpret_policy_task

scan_email_body_task:
  description: Analyze the provided {email_content} using the approved {structured_policy_rules}
    to detect sensitive data. Return a flag (body_sensitive_found) and detailed findings
    if any violations are detected.
  expected_output: 'A flag (body_sensitive_found: true/false) along with detailed
    information on any sensitive data identified in the email body.'
  async_execution: false
  agent: ContentScanner

scan_pdf_attachments_task:
  description: For each PDF in {attachments}, scan the content using {structured_policy_rules} 
    to detect sensitive data. Return a flag (pdf_sensitive_found) and detailed findings for the attachments.
  expected_output: 'A flag (pdf_sensitive_found: true/false) with detailed findings
    on any sensitive data detected in PDF attachments.'
  async_execution: false
  agent: AttachmentScanner_PDF

check_recipient_task:
  description: Compare {recipient_email} against the provided {crm_customer_list}
    to determine if the recipient is a customer. Return an is_customer flag.
  expected_output: 'A flag (is_customer: true/false) indicating whether {recipient_email}
    exists in {crm_customer_list}.'
  async_execution: false
  agent: RecipientCheck

decision_and_alert_task:
  description: Analyze the flags from scan_email_body_task (body_sensitive_found),
    scan_pdf_attachments_task (pdf_sensitive_found), and check_recipient_task (is_customer)
    to decide whether to block or allow the email. If sensitive data is found and
    the recipient is not a customer, block the email and trigger an alert to {admin_email}.
  expected_output: A decision outcome indicating whether the email is blocked or sent,
    along with details of any alert triggered.
  async_execution: false
  agent: DecisionMaker
  context:
  - scan_email_body_task
  - scan_pdf_attachments_task
  - check_recipient_task

display_decision_task:
  description: Display the decision outcome from decision_and_alert_task in a user-friendly web interface.
    The web interface should display the decision outcome, the original email content, and the structured policy rules.
    The web interface should be saved in the current working directory as decision-html.
  expected_output: An html file that provides a user-friendly web interface that displays the decision outcome. 
    The html should display the decision outcome, the original email content, the original attachments content, 
    and the structured policy rules. The html should highlight which content was found to be sensitive and, 
    for each such content, which policy rule was violated.
    The html should be saved in the current working directory as decision-html.
  async_execution: false  
  agent: DecisionDisplay
  context:
  - decision_and_alert_task

logging_task:
  description: Record a detailed log entry capturing {sender_email}, {recipient_email},
    {timestamp}, and the results from the email body scan and PDF attachment scan, the recipient
    validation outcome, the final decision, and any alerts triggered.
  expected_output: A comprehensive log entry that includes all inputs and outcomes
    for auditing purposes.
  async_execution: false
  agent: LogRecorder
  context:
  - decision_and_alert_task
